data Either a b = Left a | Right b
data Maybe a = Just a | Nothing

data List a = Cons a (List a) | Nil

ifMatch cond x y = match cond :: Bool {
  | true -> x
  | false -> y
}

list_is_empty list = match list :: List a {
  | Nil -> true
  | Cons _ _ -> false
}

map :: (a -> b) -> List a -> List b
map f list = match list :: List a {
  | Nil -> Nil
  | Cons x xs -> Cons (f x) (map f xs)
}

foldr :: (a -> b -> b) -> b -> List a -> b
foldr f acc list = match list :: List a {
  | Nil -> acc
  | Cons x xs -> f x (foldr f acc xs)
}

length xs = foldr (\_ acc. acc + 1) 0 xs

filter :: (a -> Bool) -> List a -> List a
filter pred list = match list :: List a {
  | Nil -> Nil
  | Cons x xs -> ifMatch (pred x) (Cons x (filter pred xs)) (filter pred xs)
}

isEven x = (((x / 2) * 2) == x)

main = length (filter isEven (Cons 1 (Cons 2 (Cons 3 (Cons 4 Nil)))))