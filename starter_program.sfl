first (x, _) = x
second (_, y) = y
pair x y = (x, y)

data Either a b = Left a | Right b
data Maybe a = Just a | Nothing
data List a = Cons a (List a) | Nil

fac :: Int -> Int
fac n = if n <= 1 then 1 else n * (fac (n - 1))

foldr :: (a -> b -> b) -> b -> List a -> b
foldr f acc list = match list {
  | Nil -> acc
  | Cons x xs -> f x (foldr f acc xs)
}

main = Just (fac 5)